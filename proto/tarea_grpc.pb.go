// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: tarea.proto

package distribuidosproyecto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CentralServiceClient is the client API for CentralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentralServiceClient interface {
	AbrirComunicacion(ctx context.Context, opts ...grpc.CallOption) (CentralService_AbrirComunicacionClient, error)
	Terminar(ctx context.Context, opts ...grpc.CallOption) (CentralService_TerminarClient, error)
}

type centralServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralServiceClient(cc grpc.ClientConnInterface) CentralServiceClient {
	return &centralServiceClient{cc}
}

func (c *centralServiceClient) AbrirComunicacion(ctx context.Context, opts ...grpc.CallOption) (CentralService_AbrirComunicacionClient, error) {
	stream, err := c.cc.NewStream(ctx, &CentralService_ServiceDesc.Streams[0], "/grpc.CentralService/AbrirComunicacion", opts...)
	if err != nil {
		return nil, err
	}
	x := &centralServiceAbrirComunicacionClient{stream}
	return x, nil
}

type CentralService_AbrirComunicacionClient interface {
	Send(*SituacionResp) error
	Recv() (*SituacionReq, error)
	grpc.ClientStream
}

type centralServiceAbrirComunicacionClient struct {
	grpc.ClientStream
}

func (x *centralServiceAbrirComunicacionClient) Send(m *SituacionResp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centralServiceAbrirComunicacionClient) Recv() (*SituacionReq, error) {
	m := new(SituacionReq)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *centralServiceClient) Terminar(ctx context.Context, opts ...grpc.CallOption) (CentralService_TerminarClient, error) {
	stream, err := c.cc.NewStream(ctx, &CentralService_ServiceDesc.Streams[1], "/grpc.CentralService/Terminar", opts...)
	if err != nil {
		return nil, err
	}
	x := &centralServiceTerminarClient{stream}
	return x, nil
}

type CentralService_TerminarClient interface {
	Send(*Termino) error
	Recv() (*Termino, error)
	grpc.ClientStream
}

type centralServiceTerminarClient struct {
	grpc.ClientStream
}

func (x *centralServiceTerminarClient) Send(m *Termino) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centralServiceTerminarClient) Recv() (*Termino, error) {
	m := new(Termino)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CentralServiceServer is the server API for CentralService service.
// All implementations must embed UnimplementedCentralServiceServer
// for forward compatibility
type CentralServiceServer interface {
	AbrirComunicacion(CentralService_AbrirComunicacionServer) error
	Terminar(CentralService_TerminarServer) error
	mustEmbedUnimplementedCentralServiceServer()
}

// UnimplementedCentralServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCentralServiceServer struct {
}

func (UnimplementedCentralServiceServer) AbrirComunicacion(CentralService_AbrirComunicacionServer) error {
	return status.Errorf(codes.Unimplemented, "method AbrirComunicacion not implemented")
}
func (UnimplementedCentralServiceServer) Terminar(CentralService_TerminarServer) error {
	return status.Errorf(codes.Unimplemented, "method Terminar not implemented")
}
func (UnimplementedCentralServiceServer) mustEmbedUnimplementedCentralServiceServer() {}

// UnsafeCentralServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentralServiceServer will
// result in compilation errors.
type UnsafeCentralServiceServer interface {
	mustEmbedUnimplementedCentralServiceServer()
}

func RegisterCentralServiceServer(s grpc.ServiceRegistrar, srv CentralServiceServer) {
	s.RegisterService(&CentralService_ServiceDesc, srv)
}

func _CentralService_AbrirComunicacion_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CentralServiceServer).AbrirComunicacion(&centralServiceAbrirComunicacionServer{stream})
}

type CentralService_AbrirComunicacionServer interface {
	Send(*SituacionReq) error
	Recv() (*SituacionResp, error)
	grpc.ServerStream
}

type centralServiceAbrirComunicacionServer struct {
	grpc.ServerStream
}

func (x *centralServiceAbrirComunicacionServer) Send(m *SituacionReq) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centralServiceAbrirComunicacionServer) Recv() (*SituacionResp, error) {
	m := new(SituacionResp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CentralService_Terminar_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CentralServiceServer).Terminar(&centralServiceTerminarServer{stream})
}

type CentralService_TerminarServer interface {
	Send(*Termino) error
	Recv() (*Termino, error)
	grpc.ServerStream
}

type centralServiceTerminarServer struct {
	grpc.ServerStream
}

func (x *centralServiceTerminarServer) Send(m *Termino) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centralServiceTerminarServer) Recv() (*Termino, error) {
	m := new(Termino)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CentralService_ServiceDesc is the grpc.ServiceDesc for CentralService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentralService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CentralService",
	HandlerType: (*CentralServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AbrirComunicacion",
			Handler:       _CentralService_AbrirComunicacion_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Terminar",
			Handler:       _CentralService_Terminar_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tarea.proto",
}
